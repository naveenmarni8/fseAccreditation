package com.shopping.users;

import java.nio.charset.StandardCharsets;
import java.util.Date;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import com.shopping.users.filter.SecurityConstants;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtTokenProvider {
	
	   @Value("${app.jwt-secret}")
	    private String jwtSecret;
	    @Value("${app.jwt-expiration-milliseconds}")
	    private int jwtExpirationInMs;
	    
	public String generateToken(Authentication authentication){
    String username = authentication.getName();
    Date currentDate = new Date();
    Date expireDate = new Date(currentDate.getTime() + jwtExpirationInMs);

    SecretKey key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));
    
    String token = Jwts.builder().setIssuer("Online Shopping").setSubject("JWT Token")
            .claim("username", authentication.getName())
            //.claim("authorities", populateAuthorities(authentication.getAuthorities()))
            .setIssuedAt(new Date())
            .setExpiration(new Date((new Date()).getTime() + 30000000))
            .signWith(key).compact();
    return token;
}

// get username from the token
public String getUsernameFromJWT(String token){
    Claims claims = Jwts.parser()
            .setSigningKey(jwtSecret)
            .parseClaimsJws(token)
            .getBody();
    return claims.getSubject();
}
}
