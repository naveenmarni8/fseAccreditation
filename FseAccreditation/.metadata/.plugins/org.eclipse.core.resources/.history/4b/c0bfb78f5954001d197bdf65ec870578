package com.shopping.app.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.shopping.app.exception.CustomException;
import com.shopping.app.model.Product;
import com.shopping.app.repository.ProductRepository;

@ExtendWith(MockitoExtension.class)
 class ProductServiceTests {
	
	@Mock
	private ProductRepository productRepository;
	
	@InjectMocks
	private ProductService productService;
	
private Product product;
	
	@BeforeEach
	void init()
	{
	product=Product.builder()
			.id("123")
			.productName("Realme GT Master Edition")
			.productDescription("realme GT Master Edition in India is equipped with Snapdragon 778G 5G Processor | 120Hz Super AMOLED Display")
			.productStatus("Available")
			.qty(10)
			.price(26999)
			.features(Stream.of("8 GB RAM | 128 GB ROM","Qualcomm Snapdragon 778G Processor").toList())
			.build();
	
	}
	
	@Test
	void test_addProductService_WithValidProductObject()
	{
		when(productRepository.findByProductName(product.getProductName())).thenReturn(null);
		when(productRepository.save(product)).thenReturn(product);
		assertEquals(product,productService.addProductService(product));
	}
	@Test
	void test_addProductService_thenThrowsException()
	{
		when(productRepository.findByProductName(product.getProductName())).thenReturn(product);
		assertThrows(CustomException.class,()->{
			productService.addProductService(product);
		});
		verify(productRepository,never()).save(any(Product.class));
	}
	@Test
	void test_updateProductService_withValidProductObject()
	{
		when(productRepository.findById(product.getId())).thenReturn(Optional.of(product));
		when(productRepository.save(product)).thenReturn(product);
		assertEquals(product,productService.updateProductService(product.getId()));
	}
	@Test
	void test_updateProductService_thenThrowsException()
	{
		when(productRepository.findById(product.getId())).thenReturn(Optional.empty());
		assertThrows(Exception.class,()->{
			productService.updateProductService(product.getId());
		});
		verify(productRepository,never()).save(any(Product.class));
	}
	@Test
	void test_getProductService_withValidProductName()
	{
		when(productRepository.findByProductName(product.getProductName())).thenReturn(product);
		assertNotNull(productService.getProductService(product.getProductName()));
	}
	@Test
	void test_getProductService_thenThrowsException()
	{
		when(productRepository.findByProductName(product.getProductName())).thenReturn(null);
		assertThrows(CustomException.class,()->{
			productService.getProductService(product.getProductName());
		});
		verify(productRepository,never()).findByProductName(any(String.class));
	}
	@Test
	void test_deleteProductService_withValidProductId()
	{
		when(productRepository.findById(product.getId())).thenReturn(Optional.of(product));
		assertEquals("Product Deleted!!!",productService.deleteProductService(product.getId()));
	}
	@Test
	void test_deleteProductService_thenThrowsException()
	{
		when(productRepository.findById(product.getId())).thenReturn(Optional.empty());
		assertThrows(Exception.class,()->{
			productService.deleteProductService(product.getId());
		});
	}
	@Test
	void test_getAllProductsService_thatReturnsList()
	{
		when(productRepository.findAll()).thenReturn(Stream.of(product).toList());
		assertTrue(productService.getAllProductsService().size()>0);
	}
	@Test
	void test_getAllProductsService_thenThrowsException()
	{
		List<Product> list=Collections.emptyList();
		when(productRepository.findAll()).thenReturn(list);
		assertThrows(CustomException.class,()->{
			productService.getAllProductsService();
		});
	}

}
