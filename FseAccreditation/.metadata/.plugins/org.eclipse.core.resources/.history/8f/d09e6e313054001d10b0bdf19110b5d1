package com.shopping.app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.shopping.app.model.Product;
import com.shopping.app.service.ProductService;

import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/api/v1.0/shopping")
@Slf4j
public class AppController {
	@Autowired
	private ProductService productService;
	@GetMapping("/all")
	@PreAuthorize("hasAuthority('USER')")
	public ResponseEntity<List<Product>> viewAllProducts()
	{
		return new ResponseEntity<>(productService.getAllProductsService(),HttpStatus.OK);
	}
	
	@GetMapping("/products/search/{productName}")
	@PreAuthorize("hasAuthority('USER')")
	public ResponseEntity<Product> getProduct(@PathVariable String productName)
	{
		log.info(productName);
		return new ResponseEntity<>(productService.getProductService(productName),HttpStatus.OK);
	}
	@PostMapping("/add")
	//@PreAuthorize("hasAuthority('ADMIN')")
	public ResponseEntity<Product> addProduct(@RequestBody Product product)
	{
		log.info("Product details "+product);
		return new ResponseEntity<>(productService.addProductService(product),HttpStatus.OK);
	}
	@PutMapping("/update/{id}")
	@PreAuthorize("hasAuthority('ADMIN')")
	public ResponseEntity<Product> updateProductStatus(@PathVariable String id)
	{
	return new ResponseEntity<>(productService.updateProductService(id),HttpStatus.OK);	
	}
	@DeleteMapping("/delete/{id}")
	@PreAuthorize("hasAuthority('ADMIN')")
	public ResponseEntity<String> deleteProduct(@PathVariable String id)
	{
		return new ResponseEntity<>(productService.deleteProductService(id),HttpStatus.NO_CONTENT);
	}
	@GetMapping("/check/{productId}/{productQty}")
	public boolean verifyProduct(@PathVariable String productId, @PathVariable int productQty)
	{
		return productService.verifyProductService(productId,productQty);
	}

}
